{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {AggregatorV3Interface, PriceConverter} from \"./PriceConverter.sol\";\n\nerror InsufficientContribution();\nerror OutdatedFeed();\nerror Unauthorized();\nerror WithdrawalFailed();\n\n/// @author Solomon Botchway\n/// @title A crowdfunding contract\n/// @notice This is just a demo contract to demonstrate crowfunding\n/// @dev This makes use of chainlink's price feeds\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public immutable minimumContributionInUSDTimes10exp18;\n    address public immutable owner;\n    AggregatorV3Interface public immutable priceFeed;\n\n    mapping(address => uint) public contributions;\n    address[] public funders;\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @param _priceFeed is the address of the price feed contract\n    /// @param _minimumContributionInUSD is minimum contribution ammount in USD\n    /// @dev The minimum USD contribution is multiplied by 10**18 before being stored\n    /// This is to make the fund function more gas efficient by avoiding a division of 10**18\n    /// every time the fund function is called\n    constructor(uint256 _minimumContributionInUSD, address _priceFeed) {\n        owner = msg.sender;\n        minimumContributionInUSDTimes10exp18 = _minimumContributionInUSD * (10 ** 18);\n        priceFeed = AggregatorV3Interface(_priceFeed);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /// @notice Withdraw all the funds in the contract\n    /// @dev only the owner can call this function and the contributors are reset\n    function withdraw() external onlyOwner {\n        address[] memory _funders = funders;\n        uint256 fundersLength = _funders.length;\n\n        for (uint256 funderIndex = 0; funderIndex < fundersLength; funderIndex++) {\n            contributions[_funders[funderIndex]] = 0;\n        }\n        funders = new address[](0);\n\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert WithdrawalFailed();\n        }\n    }\n\n    /// @notice Make a contribution to the contract\n    /// @dev USD price is retrieved from chainlink pricefeed\n    function fund() public payable {\n        (uint256 amountInUsdTimesTimes10exp18, uint256 updatedAt) = msg.value.getUsdData(priceFeed);\n\n        if (amountInUsdTimesTimes10exp18 < minimumContributionInUSDTimes10exp18) {\n            revert InsufficientContribution();\n        }\n        if (block.timestamp - updatedAt > 1 hours) {\n            revert OutdatedFeed();\n        }\n\n        contributions[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n}\n"
        },
        "contracts/mocks/MockV3Aggregator.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {MockV3Aggregator} from \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getUsdData(uint256 amountInWei, AggregatorV3Interface priceFeed) internal view returns (uint256, uint256) {\n        (, int256 price, , uint256 updatedAt, ) = priceFeed.latestRoundData();\n\n        return (((uint256(price) * amountInWei) / (10 ** priceFeed.decimals())), updatedAt);\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
